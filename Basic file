public interface LoanRepository extends JpaRepository<Loan, Long> {
    // Fetch the latest loan_id (assuming highest value in lexicographical order)
    @Query("SELECT l.loanId FROM Loan l ORDER BY l.loanId DESC LIMIT 1")
    Optional<String> findLatestLoanId();
}



@Service
public class LoanService {

    @Autowired
    private LoanRepository loanRepository;

    public String generateNextLoanId() {
        // Fetch the latest loan_id from the database
        Optional<String> latestLoanIdOpt = loanRepository.findLatestLoanId();

        // If no loan ID exists yet, start from "AAAAAA"
        String latestLoanId = latestLoanIdOpt.orElse("AAAAAA");

        // Generate the next alphanumeric loan_id
        String nextLoanId = getNextLoanId(latestLoanId);

        // Save the new Loan entity with the new loan_id
        Loan newLoan = new Loan();
        newLoan.setLoanId(nextLoanId);
        loanRepository.save(newLoan);

        return nextLoanId;
    }

    // Function to increment the loan_id
    private String getNextLoanId(String currentLoanId) {
        char[] idChars = currentLoanId.toCharArray();
        int length = idChars.length;

        // Iterate from the last character towards the first to increment
        for (int i = length - 1; i >= 0; i--) {
            if (idChars[i] == '9') {
                idChars[i] = 'A'; // After '9' comes 'A'
                break;
            } else if (idChars[i] == 'Z') {
                idChars[i] = '0'; // After 'Z' comes '0', carry over
            } else {
                idChars[i]++; // Increment the character
                break;
            }
        }

        // If the entire string has been reset (like from ZZZZZZ to 000000), we restart the sequence
        return new String(idChars);
    }
}



AAAAAA

AAAAA1

AAAAA2

AAAAA9

AAAAA0

AAAAB0

AAAAB1

AAAAB9

AAAAZ0

AAAAB0

AAAAB1



@RestController
@RequestMapping("/api/support")
public class SupportController {

    @Autowired
    private LoanService loanService;

    // Endpoint to generate the next loan_id
    @GetMapping("/next-loan-id")
    public ResponseEntity<String> getNextLoanId() {
        // Call the loanService to get the next loan_id
        String nextLoanId = loanService.generateNextLoanId();

        // Return the next loan_id in the response
        return ResponseEntity.ok(nextLoanId);
    }
}




@SpringBootTest
@AutoConfigureMockMvc
public class SupportControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private LoanService loanService; // Mock the LoanService to isolate controller testing

    @Test
    public void testGetNextLoanId() throws Exception {
        // Mock the behavior of LoanService to return a specific loan_id
        String mockLoanId = "AAAAAA";
        when(loanService.generateNextLoanId()).thenReturn(mockLoanId);

        // Perform the GET request to the API endpoint
        mockMvc.perform(get("/api/support/next-loan-id"))
                .andExpect(status().isOk())  // Check if the status is OK (200)
                .andExpect(content().string(mockLoanId));  // Check if the response contains the correct loan_id
    }
}


@Entity
@Table(name = "loans")
public class LoanEntity {

    @Id
    @Column(name = "loan_id", nullable = false, unique = true, length = 6)
    private String loanId;

    // Default constructor
    public LoanEntity() {
    }

    // Parameterized constructor
    public LoanEntity(String loanId) {
        this.loanId = loanId;
    }

    // Getter and Setter for loanId
    public String getLoanId() {
        return loanId;
    }

    public void setLoanId(String loanId) {
        this.loanId = loanId;
    }

    @Override
    public String toString() {
        return "LoanEntity{" +
                "loanId='" + loanId + '\'' +
                '}';
    }
}




