import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class InstructionNumberServiceTest {

    @Mock
    private InstructionNumberRepository instructionNumberRepository;  // Mock repository

    @InjectMocks
    private InstructionNumberService instructionNumberService;  // Inject mocks into the service

    @BeforeEach
    public void setUp() {
        // Reset mocks before each test
        Mockito.reset(instructionNumberRepository);
    }

    @Test
    public void testGenerateNextInstructionNumber_whenNoExistingNumber() {
        // Mock the repository to return null when no instruction number exists
        when(instructionNumberRepository.findLatestInstructionNumber()).thenReturn(null);

        // Call the service method
        String result = instructionNumberService.generateNextInstructionNumber();

        // Assert the result is "AAAAAA"
        assertEquals("AAAAAA", result);

        // Verify that save method was called
        verify(instructionNumberRepository, times(1)).save(any(InstructionNumber.class));
    }

    @Test
    public void testGenerateNextInstructionNumber_whenExistingNumber() {
        // Mock the repository to return an existing instruction number
        when(instructionNumberRepository.findLatestInstructionNumber()).thenReturn("AAAAAA");

        // Call the service method
        String result = instructionNumberService.generateNextInstructionNumber();

        // Assert the result is the next instruction number
        assertEquals("AAAAA1", result);

        // Verify that the update method was called once
        verify(instructionNumberRepository, times(1)).updateInstructionNumber("AAAAA1");
    }

    @Test
    public void testGenerateNextInstructionNumber_whenIncrementing() {
        // Mock the repository to return an existing instruction number
        when(instructionNumberRepository.findLatestInstructionNumber()).thenReturn("AAAAA1");

        // Call the service method
        String result = instructionNumberService.generateNextInstructionNumber();

        // Assert the result is the next instruction number
        assertEquals("AAAAA2", result);

        // Verify that the update method was called once
        verify(instructionNumberRepository, times(1)).updateInstructionNumber("AAAAA2");
    }

    @Test
    public void testGenerateNextInstructionNumber_whenReachesA9() {
        // Mock the repository to return an existing instruction number
        when(instructionNumberRepository.findLatestInstructionNumber()).thenReturn("AAAAA9");

        // Call the service method
        String result = instructionNumberService.generateNextInstructionNumber();

        // Assert the result is the next instruction number (it should go to AAAAAA)
        assertEquals("AAAAAA", result);

        // Verify that the update method was called once
        verify(instructionNumberRepository, times(1)).updateInstructionNumber("AAAAAA");
    }
}